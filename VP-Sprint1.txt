Sprint 1
Create a Console Application with appropriate tests.
Create a VirtualPet class.
Start with these JUnit tests.
the test:
public class ApplicationTest {

    @Test
    public void shouldBeAbleToCreatePet() {
        VirtualPet pet = new VirtualPet();
    }

    @Test
    public void petShouldHaveName() {
        VirtualPet underTest = new VirtualPet("Jeff");

        String expected = underTest.getName();

        assertEquals(expected, "Jeff");
    }

    @Test
    public void shouldHaveDefaultHunger() {
        VirtualPet underTest = new VirtualPet("Steve");

        int expected = underTest.getHunger;

        assertEquals(expected, 10);
    }
}


Add additional properties (thirst, boredom, etc)
Don't forget to add tests!
Inside Application.java, prompt the user for a pet name, create an instance of that pet, assign the specified name, and then display the pet's name to the user (use the appropriate getter to retrieve the name) before exiting the application.
When invoking the Tick method on your VirtualPet, it should update itself as if some time has passed (increase Hunger and Boredom, for example.)
Make this JUnit test pass to get started.

public class TickExampleTest {

    @Test
    public void shouldTick() {
        VirtualPet pet = new VirtualPet("Kendrick");

        int initialHunger = pet.getHunger();
        pet.tick();
        int hungerAfterTick = pet.getHunger();

        assertEquals(initialHunger + 10, hungerAfterTick);
    }
}

Add methods to your VirtualPet that feed, play, etc your pet.
Write the appropriate tests to ensure that the pet's properties are updating correctly.
Ensure that your pet can never have a negative value for hunger, boredom, etc.
This will be your last reminder about writing tests. From now on, assume that all functionality requires proper testing!



